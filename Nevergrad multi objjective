from math import exp, sqrt, tanh, pow
import numpy as np
import nevergrad.common.typing as tp
from nevergrad.common.decorators import Registry
import nevergrad as ng

# function allowing us to concatenate two functions
def concat(func1, func2):
    def new_func(*func2):
        return func1(np.concatenate(func2, axis=0))
    return new_func
    
# Fonsecaâ€“Fleming function 
#search domains: [-4,4] for x
#constraints: none

def FonsecaFleming(base_Optimizer = CMA, budget = 100):
# CMA and 100 are place-holders, as these are arguments, the function could take in any form of these two
    f1 = 1
    f2 = 1
    n = len(x)
    for i, value in enumerate(x):
      f1 += -np.exp(-((value - 1/n**(1/2))**2))
      f2 += -np.exp(-((value + 1/n**(1/2))**2))

    # concatenate both functions
    f = concat(f1, f2)
    
    # set the search domains
    instrument = ng.Instrumentation(ng.var.Array(1).bounded([-4, 4]))
    
    # define the optimizer
    optimizer = ng.optimizers.base_Optimizer(parametrization= instrument, \
                                             budget=budget)
    
    # minimize the function under constraints using chosen parameters
    recommendation = optimizer.minimize(f)                           
                                    
    return recommendation
    
   # Binh and Korn function 

def BinhKorn(base_Optimizer=CMA, budget = 100): 
  f1=4*x**2+4*y**2
  f2=(x-5)**2+(y-5)**2

  # concatenate both functions
  f=concat(f1,f2)

  # set the search domains
  instrument = ng.Instrumentation(ng.var.Array(2).bounded([0, 5], [0, 3]))

  # define the optimizer
  optimizer = ng.optimizers.base.Optimizer(parametrization= instrument, budget=budget)

  # add the constraints
  optimizer.parametrization.register_cheap_constraint(lambda x, y: (x-5)**2 + y**2 <= 25)
  optimizer.parametrization.register_cheap_constraint(lambda x, y: (x-8)**2 + (y+3)**2 >= 7.7)
     
  # minimize the function under constraints using chosen parameters
  recommendation = optimizer.minimize(f)
                                    
  return recommendation

# Chankong and Haimes function
def Chankong_Haimes(base_Optimizer=CMA, budget = 100):
    f1 = 2 + (x-2)**2 + (y-1)**2
    f2 = 9*x - (y - 1)**2    
    
    # concatenate both functions
    f = concat(f1, f2)
    
    # set the search domains
    instrument = ng.Instrumentation(ng.var.Array(2).bounded([-20, 20], [-20, 20])
    
    # define the optimizer
    optimizer = ng.optimizers.base_Optimizer(parametrization= instrument, budget=budget)                                
                                    
    # add the constraints
    optimizer.parametrization.register_cheap_constraint(lambda x, y: x**2 + y**2 <= 225)
    optimizer.parametrization.register_cheap_constraint(lambda x, y: x - 3y + 10 <= 0)
     
    # minimize the function under constraints using chosen parameters
    recommendation = optimizer.minimize(f)
                                    
  return recommendation


# Constr-Ex problem 
def ConstrEx(base_Optimizer=CMA, budget = 100):
    f1 = x
    f2 = (1+y)/x
    
    # concatenate both functions
    f = concat(f1, f2)
    
    # set the search domains
    instrument = ng.Instrumentation(ng.var.Array(2).bounded([0.1, 1], [0, 5])
    
    # define the optimizer
    optimizer = ng.optimizers.base_Optimizer(parametrization= instrument, budget=budget)
    
    # add the constraints
    optimizer.parametrization.register_cheap_constraint(lambda x, y: y + 9x >= 6)
    optimizer.parametrization.register_cheap_constraint(lambda x, y: -y + 9x >= 1)
    
    # minimize the function under constraints using chosen parameters
    recommendation = optimizer.minimize(f)                           
                                    
  return recommendation
  
  # Schaffer function 


def schaffer_func (base_Optimizer=CMA, budget = 100):
  f1 = x**2
  f2 = (x - 2)**2

  # concatenate both functions
  f = concat(f1, f2)

  # set the search domains
  instrument = ng.Instrumentation(ng.var.Array(1).bounded([-100000, 100000 ]))

  # define the optimizer
  optimizer = ng.optimizers.base_Optimizer(parametrization= instrument, budget=budget)  
    
  # minimize the function using chosen parameters
  recommendation = optimizer.minimize(f)                           
                                    
  return recommendation

 
# Test function 
def test_func(base_Optimizer=CMA, budget = 100):
  f1 = x**2 - y
  f2 = 1 - 0.5*x - y
  # concatenate both functions
  f = concat(f1, f2)
 
  # set the search domains
  instrument = ng.Instrumentation(ng.var.Array(2).bounded([-7, 4],[-7, 4])
 
  # define the optimizer
  optimizer = ng.optimizers.base_Optimizer(parametrization= instrument, budget=budget)                                
                                    
  # add the constraints
  optimizer.parametrization.register_cheap_constraint(lambda x, y: 6.5 - (x/6) - y >= 0)
  optimizer.parametrization.register_cheap_constraint(lambda x, y: 7.5 - 0.5*x - y >= 0)
  optimizer.parametrization.register_cheap_constraint(lambda x, y: g3 30 - 5*x - y >= 0)
    
  # minimize the function under constraints using chosen parameters
  recommendation = optimizer.minimize(f)
                                    
  return recommendation
  
 
# Kursawe function
 
def kursawe(base_Optimizer=CMA, budget = 100):
  f1 = -10 * np.exp(-0.2 * np.sqrt(x[0]**2 + x[1]**2)) - 10 * np.exp(-0.2 * np.sqrt(x[1]**2 + x[2]**2))
  f2 = 0
  for i in range(len(x)):
    f2 += np.abs(x[i]**0.8) + 5*np.sin(x[i]**3)
 
  # concatenate both functions
  f = concat(f1, f2)
 
  # set the search domains
  instrument = ng.Instrumentation(ng.var.Array(2).bounded([-5, 5])
 
  # define the optimizer
  optimizer = ng.optimizers.base_Optimizer(parametrization= instrument, budget=budget)                                
                                    
  # add the constraints
  optimizer.parametrization.register_cheap_constraint(lambda x, y: x**2 + y**2 <= 225)
  optimizer.parametrization.register_cheap_constraint(lambda x, y: x - 3y + 10 <= 0)
     
  # minimize the function under constraints using chosen parameters
  recommendation = optimizer.minimize(f)
                                    
  return recommendation
